{"ast":null,"code":"var _jsxFileName = \"/Users/yeseul/workspace/COMP308-Healthcare-Website/react-ui/src/components/nurse/DetailPatientInfo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nfunction DetailPatientInfo(props) {\n  const [screen, setScreen] = useState('auth');\n  const [patientUsername, setPatientUsername] = useState();\n  console.log('props.screen', props.screen); //check if the user already logged-in\n\n  const readCookie = async () => {\n    try {\n      console.log('--- in readCookie function ---'); //\n\n      const res = await axios.get('/read_cookie'); // \n\n      if (res.data.screen !== undefined) {\n        setScreen(res.data.screen);\n        console.log(res.data.screen);\n        console.log(\"username\" + res.data.username);\n        setPatientUsername(res.data.username);\n      }\n    } catch (e) {\n      setScreen('auth');\n      console.log(e);\n    }\n  }; //runs the first time the view is rendered\n  //to check if user is signed in\n\n\n  useEffect(() => {\n    readCookie();\n  }, []); //only the first render\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Username: \", patientUsername));\n}\n\nexport default withRouter(DetailPatientInfo);","map":{"version":3,"sources":["/Users/yeseul/workspace/COMP308-Healthcare-Website/react-ui/src/components/nurse/DetailPatientInfo.js"],"names":["React","useState","useEffect","withRouter","axios","DetailPatientInfo","props","screen","setScreen","patientUsername","setPatientUsername","console","log","readCookie","res","get","data","undefined","username","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,MAAD,CAApC;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,EAAtD;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BN,KAAK,CAACC,MAAjC,EAJ8B,CAKhC;;AACA,QAAMM,UAAU,GAAG,YAAY;AAC7B,QAAI;AACFF,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EADE,CAGF;;AACA,YAAME,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,cAAV,CAAlB,CAJE,CAKF;;AACA,UAAID,GAAG,CAACE,IAAJ,CAAST,MAAT,KAAoBU,SAAxB,EAAmC;AACjCT,QAAAA,SAAS,CAACM,GAAG,CAACE,IAAJ,CAAST,MAAV,CAAT;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACE,IAAJ,CAAST,MAArB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAWE,GAAG,CAACE,IAAJ,CAASE,QAAhC;AACAR,QAAAA,kBAAkB,CAACI,GAAG,CAACE,IAAJ,CAASE,QAAV,CAAlB;AACD;AACF,KAZD,CAYE,OAAOC,CAAP,EAAU;AACVX,MAAAA,SAAS,CAAC,MAAD,CAAT;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYO,CAAZ;AACD;AACF,GAjBD,CANgC,CAwBhC;AACA;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT,CA1BgC,CA4BxB;;AAEN,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAeJ,eAAf,CADJ,CADJ;AAMH;;AAED,eAAeN,UAAU,CAACE,iBAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nfunction DetailPatientInfo(props) {\n    const [screen, setScreen] = useState('auth');\n    const [patientUsername, setPatientUsername] = useState();\n\n    console.log('props.screen',props.screen);\n  //check if the user already logged-in\n  const readCookie = async () => {\n    try {\n      console.log('--- in readCookie function ---');\n\n      //\n      const res = await axios.get('/read_cookie');\n      // \n      if (res.data.screen !== undefined) {\n        setScreen(res.data.screen);\n        console.log(res.data.screen)\n        console.log(\"username\"+res.data.username)\n        setPatientUsername(res.data.username)\n      }\n    } catch (e) {\n      setScreen('auth');\n      console.log(e);\n    }\n  };\n  //runs the first time the view is rendered\n  //to check if user is signed in\n  useEffect(() => {\n    readCookie();\n  }, []); //only the first render\n\n    return (\n        <div>\n            <h2>Username: {patientUsername}</h2>\n        </div>\n    );\n\n}\n\nexport default withRouter(DetailPatientInfo);"]},"metadata":{},"sourceType":"module"}